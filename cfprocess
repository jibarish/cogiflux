#!/usr/bin/env python3

import os, sys, inspect, datetime, json
from cfparser import cfparse

if len(sys.argv) < 2:
    print ('Specify input file as CLA.')
    exit()
infilename = sys.argv[1]

# Dirs
rootdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
cabdir = os.path.join(rootdir, 'cabinet')
testdir = os.path.join(rootdir, 'test')

# Files
infile = os.path.abspath(infilename)
backupfile = os.path.join(cabdir, 'backup.cflux')
entriesfile = os.path.join(cabdir, 'entries.json')
# astfile = os.path.join(cabdir, 'ast.py')

# Make cabinet if it doesn't exist
os.makedirs(cabdir,exist_ok=True)

# ------------------------------------------------------------------------------

def get_data(filename):
    """Return raw contents of file."""
    with open(filename, 'r') as f:
        return f.read()

def wipe(filename):
    """Erase file."""
    with open(filename, 'w') as f:
        f.write("")

def backup(src, dst):
    """Append src file contents to dst file."""
    with open(dst, 'a') as output:
        output.write("%% " + stamp())
        output.write("\n\n")
        data = get_data(src).strip("\n")
        output.write(data)
        output.write("\n\n\n")

def stamp():
    """Return present timestamp."""
    return '{:%Y-%m-%d %H:%M:%S}'.format(datetime.datetime.now())

# ------------------------------------------------------------------------------

class Entry:
    def __init__(self, date, tags, content):
        self.date = date
        self.tags = tags
        self.content = content

    def to_dict(self):
        return self.__dict__

class CfEncoder(json.JSONEncoder):
    def default(self, o):
        return o.to_dict()

def parse(filename):
    try:
        result = cfparse(filename)
    except:
        print ("Input file is empty.")
        exit()

    # ------------------------ DEBUG ------------------------
    # i = 1
    # for each in result:
    #     print ("Entry {0}:".format(i))
    #     print ("\ttags: {0}".format(each['tags']))
    #     print ("\tcontent: {0}".format(each['content']))
    #     print ()
    #     i += 1
    # -------------------------------------------------------

    # Add entries to json storage file
    # Create file if none exists
    try:
        with open(entriesfile, 'r') as f:
            try:
                entries = json.load(f)
            except:
                entries = []
    except:
        with open(entriesfile, 'w') as f:
            pass
        entries = []

    with open(entriesfile, 'w') as f:
        for each in result:
            date = stamp()
            tags = [x for x in each['tags']]
            content = each['content']
            entry = Entry(date, tags, content)
            entries.append(entry.to_dict())
        json.dump(entries, f, cls=CfEncoder)

# ------------------------------------------------------------------------------

def main():
    # backup(infile, backupfile)
    parse(infile)
    # wipe(infile)

if __name__ == "__main__":
    main()
